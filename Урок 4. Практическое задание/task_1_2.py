import random
import timeit

"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Подсказка:
1) возьмите 2-3 задачи, реализованные ранее, сделайте замеры на разных входных данных
2) сделайте для каждой из задач оптимизацию (придумайте что можно оптимизировать)
и также выполните замеры на уже оптимизированных алгоритмах
3) опишите результаты - где, что эффективнее и почему.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""
"""
Задание_5.	В массиве найти максимальный отрицательный элемент.
Вывести на экран его значение и позицию (индекс) в массиве.

Подсказка: максимальный отрицательный - элемент, наиболее близкий к нулю

Пример:
Базовый список: [-55, -69, -5, 72, -41, -58, -79, 58, 74, 1]
Максимальный отрицательный элемент в данном массиве = -5, его индекс 2
"""


def max_min1(a):
    k = min(a)
    k_ind = a.index(k)
    for i, n in enumerate(a):
        if n < 0:
            if n > k:
                k = n
                k_ind = i
    # print(f'максимальны отрицательный элемент {k}, его индекс {k_ind}')


def max_min2(a):
    lst = [el for el in a if el < 0]
    max_min_el = max(lst)
    max_min_ind = lst.index(max_min_el)
    # print(f'максимальны отрицательный элемент {max_min_el}, его индекс {max_min_ind}')


new_list = [random.randint(-99, 99) for i in range(0, 100)]
print(new_list)

print(timeit.timeit("max_min1(new_list)", setup="from __main__ import max_min1, new_list", number=1000))
print(timeit.timeit("max_min2(new_list)", setup="from __main__ import max_min2, new_list", number=1000))

"""
вторая функция отимальнее так как в ней используется генератор списка для отсеивания положительных чисел. И затем 
максимальное число ищется уже среди меньшего колличества чисел.
"""
