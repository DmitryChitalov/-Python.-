"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Подсказка:
1) возьмите 2-3 задачи, реализованные ранее, сделайте замеры на разных входных данных
2) сделайте для каждой из задач оптимизацию (придумайте что можно оптимизировать)
и также выполните замеры на уже оптимизированных алгоритмах
3) опишите результаты - где, что эффективнее и почему.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

from timeit import timeit
import sys

def sum_1_2_cycle(l):
    sum = 0
    for i in range(l):
        sum += (-0.5) ** i
    return sum

def sum_1_2_gener(l):
    return sum([(-0.5) ** i for i in range(l)])
#    return sum

sys.setrecursionlimit(10000)
def summ_1_2_rec(l):
    if l == 1:
        return 1
    if l > 1:
        return ((-0.5) ** (l - 1)) + summ_1_2_rec(l - 1)

def summ_n_cycle(l):
    SUM = 0
    for I in range(1, l + 1):
        SUM += I
    return SUM

def summ_n_gener(l):
    s = [i for i in range(1, l + 1)]
    return sum(s)

print("Сумма '1 - 1/2 + 1/4 - 1/8 + ...' через рекурсию:", timeit("summ_1_2_rec(1000)", setup="from __main__ import summ_1_2_rec",
                                                       number=1000))
print("Сумма '1 - 1/2 + 1/4 - 1/8 + ...' через цикл:", timeit("sum_1_2_cycle(1000)", setup="from __main__ import sum_1_2_cycle",
                                                       number=1000))
print("Сумма '1 - 1/2 + 1/4 - 1/8 + ...' через генератор:", timeit("sum_1_2_gener(1000)", setup="from __main__ import sum_1_2_gener",
                                                       number=1000))

"""
Вычисление суммы членов ряда '1, -1/2, 1/4, -1/8, ...' через рекурсию дало самый плохой результат, цикл и генератор при 
многочисленных запусках дали примерно двукратное преимущество относительно рекурсии со случайным превосходством
друг над другом
Сумма '1 - 1/2 + 1/4 - 1/8 + ...' через рекурсию: 0.7108652
Сумма '1 - 1/2 + 1/4 - 1/8 + ...' через цикл: 0.31374940000000007
Сумма '1 - 1/2 + 1/4 - 1/8 + ...' через генератор: 0.3116080000000001
Для вычисления такой суммы одинаково эффективно можно пользоваться циклом или генератором
"""

print("Сумма '1 + 2 + 3 + 4 + ...' через цикл:", timeit("summ_n_cycle(1000)", setup="from __main__ import summ_n_cycle",
                                                   number=1000))
print("Сумма '1 + 2 + 3 + 4 + ...' через генератор:", timeit("summ_n_gener(1000)", setup="from __main__ import summ_n_gener",
                                                   number=1000))

"""
Вычисление суммы '1 + 2 + 3 + 4 + ...' с использованием генератора даёт примерно двукратное снижение времени вычисления
относительно цикла и является более предпочтительным в данном случае.

Сумма '1 + 2 + 3 + 4 + ...' через цикл: 0.09971859999999988
Сумма '1 + 2 + 3 + 4 + ...' через генератор: 0.05326389999999992
"""
