import timeit
import random

"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Подсказка:
1) возьмите 2-3 задачи, реализованные ранее, сделайте замеры на разных входных данных
2) сделайте для каждой из задач оптимизацию (придумайте что можно оптимизировать)
и также выполните замеры на уже оптимизированных алгоритмах
3) опишите результаты - где, что эффективнее и почему.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

"""
Задание_2. Во втором массиве сохранить индексы четных элементов первого массива.
Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй массив
надо заполнить значениями 1, 4, 5, 6 (или 0, 3, 4, 5 - если индексация начинается с нуля),
т.к. именно в этих позициях первого массива стоят четные числа.

Подсказка:
Попробуйте решить эту задачу в одну строку (такое решение точно есть)

Пример:
Исходный массив: [8, 3, 15, 6, 4, 2], результат: [0, 3, 4, 5]
"""


def even_number1(b):
    even_ind_lst = []
    for elem in b:
        if elem % 2 == 0:
            even_ind_lst.append(b.index(elem))


def even_number2(b):
    even_ind_lst = [i for i, v in enumerate(b) if v % 2 == 0]


new_list = [random.randint(0, 99) for i in range(0, 1000)]

print(timeit.timeit("even_number1(new_list)", setup="from __main__ import even_number1, new_list", number=1000))
print(timeit.timeit("even_number2(new_list)", setup="from __main__ import even_number2, new_list", number=1000))
"""
вторая функция отимальнее так как в ней используется генератор списка и не используется append
"""
