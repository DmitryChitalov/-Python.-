"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Подсказка:
1) возьмите 2-3 задачи, реализованные ранее, сделайте замеры на разных входных данных
2) сделайте для каждой из задач оптимизацию (придумайте что можно оптимизировать)
и также выполните замеры на уже оптимизированных алгоритмах
3) опишите результаты - где, что эффективнее и почему.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

import timeit


def funcloop(num):
    """O(n) – линейная сложность
        функция использующая цикл"""

    array = []

    for i in range(len(num)):
        if num[i] % 2 == 0:
            array.append(i)
    return array


def funcgen(nums):
    """O(n) – линейная сложность
        Функция использующая генератор"""

    return [i for i, elem in enumerate(nums) if elem % 2 == 0]


NUM = [elem for elem in range(10000)]

print(timeit.timeit(
        "funcloop(NUM)",
        setup="from __main__ import funcloop, NUM",
        number=10000))

print(timeit.timeit(
        "funcgen(NUM)",
        setup="from __main__ import funcgen, NUM",
        number=10000))


"""
 Результат:
 Функция использующая цикл завершилась за 23.208390899999998 секунд.
 Функция использующая генератор завершилась за 14.354028099999997 секунд.

 Вывод:
 Там где можно нужно заменять циклы генераторами
 т.к. в этом случае код работает почти в половину быстрее.
 Потому что генераторы это встроенные функции.
"""
