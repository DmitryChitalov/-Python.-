"""
Написать два алгоритма нахождения i-го по счёту простого числа.
Без использования «Решета Эратосфена»;
Используя алгоритм «Решето Эратосфена»

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""
import timeit

def fun_1(i):
    """Без использования «Решета Эратосфена»"""
    k = 1
    n = 2
    while k <= i:
        a = 1
        h = True
        while a <= n:
            if n % a == 0 and a != 1 and a != n:
                h = False
                break
            a += 1
        if h:
            if k == i:
                break
            k += 1
        n += 1
    return n


def fun_2(i):
    """«Решето Эратосфена»"""
    n = 2
    l = 10000
    sieve = [x for x in range(l)]
    sieve[1] = 0
    while n < l:
        if sieve[n] != 0:
            m = n*2
            while m < l:
                sieve[m] = 0
                m += n
        n += 1
    return [p for p in sieve if p != 0][i-1]

i = int(input('Введите порядковый номер искомого простого числа: '))
print(timeit.timeit("fun_1(i)", setup="from __main__ import fun_1, i", number=100))
print(timeit.timeit("fun_2(i)", setup="from __main__ import fun_2, i", number=100))
"""
для 10ти без использования «Решета Эратосфена» = 0.0023512000000001088
для 10ти с решетом эратосфена =  0.3458125000000001

для 100 без использования «Решета Эратосфена» =0.21479249999999972
для 100 с решетом эратосфена =0.35027620000000015

для 100ти без использования «Решета Эратосфена» =35.8280196
для 100ти с решетом эратосфена =0.3599631999999957

Возможно, решето подходит только для аналитики огромных чисел. Для маленьких оно не эффективно
Без использования «Решета Эратосфена» -  O(n^2)
Решета Эратосфена  -  O(n log(log n))
"""