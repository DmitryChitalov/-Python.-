"""
Написать два алгоритма нахождения i-го по счёту простого числа.
Без использования «Решета Эратосфена»;
Используя алгоритм «Решето Эратосфена»

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""
import timeit
import cProfile

'''Функция поиска i-го простого числа,
    без использования алгоритма «Решето Эратосфена»
def sieve_without_erato():
'''


def sieve_without_erato(n):
    list = []
    for i in range(2, n):
        result = True
        for j in range(2, i):
            if i % j == 0:
                result = False
        if result:
            list.append(i)
    return list


'''Функция поиска i-го простого числа,
    используя алгоритм «Решето Эратосфена»
    '''


def sieve_erato(n):
    sieve = list(range(n + 1))
    sieve[1] = 0
    for i in sieve:
        if i > 1:
            for j in range(i + i, len(sieve), i):
                sieve[j] = 0
    return sieve


def main():
    res_erato = sieve_erato(10000)
    res_without = sieve_without_erato(10000)


cProfile.run('main()')

"""
Результаты замера: с решетом - 0,006 сек.,
                   без решета - 9,342 сек.

В алгоритме безе решета сложность квадратичная, а с решетом, как мы выяснили O(N log(logN)).
В алгоритме без решета программа обращается к каждому элементу массива, пробегает по всему множеству,
а в алгоритме "решето Эратосфена" можно обращаться только к нечетным числам, поскольку все четные кроме 2
являются составными..
"""