
"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

Подсказка:
1) возьмите 2-3 задачи, реализованные ранее, сделайте замеры на разных входных данных
2) сделайте для каждой из задач оптимизацию (придумайте что можно оптимизировать)
и также выполните замеры на уже оптимизированных алгоритмах
3) опишите результаты - где, что эффективнее и почему.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

import timeit
"""
   Голые цифры замеров и немного аналитики для задачи подсчета четных и нечетных цифр в числе
"""


def recur(n_1, even=0, odd=0):
    """
    Программа подсчета четных и нечетных цифр в числе
    """
    el_1 = n_1 % 10
    if el_1 % 2 == 0:
        even += 1
    else:
        odd += 1
    n_1 = n_1 // 10
    if n_1 == 0:
        return # print(f"Количество цифр в числе {even+odd}. Четные: {even}. Нечетные {odd}.")
    recur(n_1, even, odd)


# через строку кода
STR_CODE = '''
NUMB = 8

EVEN = 0
ODD = 0
M = 0
INSIDE = NUMB
while M != 1:
    EL = INSIDE % 10
    if EL % 2 == 0:
        EVEN += 1
    else:
        ODD += 1
    INSIDE = INSIDE // 10
    if INSIDE == 0:
        break
'''

N = 8
print(timeit.timeit("recur(N)", setup="from __main__ import recur, N", number=1000))
print(timeit.timeit(STR_CODE, number=1000))

"""
Уже начиная с 1-о значного числа рекурсия, как правило, медленнее, но у меня в некоторых случаях получалось, что 
рекурсия быстрее:
рекурсия - 0.0002278
цикл     - 0.0001853

Для 2-х значного числа:
рекурсия - 0.0004576
цикл     - 0.0003253

С увеличением разрядности числа разрыв во времени увеличивается. Так для 3-х значного числа:
рекурсия - 0.0006842
цикл     - 0.0004758

Для 87-и значного числа:
рекурсия - 0.03599
цикл     - 0.02645

Это происходит потому, что при рекурсии функции приходится на каждом шаге вызывать саму себя с новыми параметрами, а в 
цикле происходит обход каждой цифры числа и к счетчику выходных данных прибавляется 1.
Грубо говоря, в рекурсивной функции происходит то же самое, что и в цикле, 
плюс рекурсивной функции приходится на каждом шаге вызывать саму себя с новыми параметрами.
"""
