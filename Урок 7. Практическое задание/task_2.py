"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

from random import random

NUMB = int(input('Введите число элементов: '))
ARY = [random() * 50 for _ in range(NUMB)]
print(f'Исходный - {ARY}')


# функция дедения массива на подмассивы, пока в подмассивах
# не останется по одному элементу
def merge_sort(ary):
    if len(ary) < 2:  # проверяем что в массиве больше одного элемента
        return ary[:]
    else:
        middle = int(len(ary) / 2)    # ищем середину массива (int вместо целочисленного деления)
        left = merge_sort(ary[:middle])  # рекурсивно вызвваем функцию деления левой части
        right = merge_sort(ary[middle:])  # рекурсивно вызвваем функцию деления правой части
        # print(left, right)  # подглядываем
        return merge(left, right)  # вызываем функцию слияния и сортировки массивов


def merge(left, right):
    result = []     # для записи слитых отсотрированных массивов
    i, j = 0, 0
    while i < len(left) and j < len(right):  # проверяем что ни один массив не равен 0
        if left[i] < right[j]:  # сравниваем элементы правого и левойго массива
            result.append(left[i])  # наименьший записываем в результирующий массив
            i += 1
        else:
            result.append(right[j])  # наименьший записываем в результирующий массив
            j += 1
    # если один из массивов закончился остаток второго
    # дописываем в результирующий
    while i < len(left):
        result.append(left[i])
        i += 1
    while j < len(right):
        result.append(right[j])
        j += 1
    return result


print(f'Отсортированный - {merge_sort(ARY)}')
