"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

import random


def merge_sort(res_list):
    """
    Функция для сортировки списка методом слияния
    """
    # сортировку имеет и разбиение имеет смысл выполнять
    # когда список имеет более 1 элемента
    # список из 1 элемента считается упорядоченным
    if len(res_list) > 1:
        # получаем индекс элемента, находящегося в "середине"
        center = len(res_list) // 2
        # разбиваем список на левую и правую часть
        left = res_list[:center]
        right = res_list[center:]

        # сортируем обе части отдельно
        merge_sort(left)
        merge_sort(right)

        # счетчики
        i, j, k = 0, 0, 0

        # выполняем цикл пока не пройдем по всем элементам
        # левой и правой части
        while i < len(left) and j < len(right):
            # если текущий элемент левой части меньше,
            # чем текущий элемент правой части
            if left[i] < right[j]:
                # то на место элемента с индексом 'k'
                # с основном списке ставим элемент левой части
                res_list[k] = left[i]
                # увеличиваем счетчик левой части, т.к.
                # данный элемент мы уже использовали
                i += 1
            else:
                # иначе- ставим элемент правой части
                res_list[k] = right[j]
                # увеличиваем счетчик
                j += 1
            # увеличиваем счетчик элементов основного списка
            k += 1

        # т.к. один из списков может быть короче, чем другой
        # то необходимо добавить оставшиеся элементы (если они есть)
        # к основному списку

        # проверяем левую часть, при существовании остатков добавляем
        while i < len(left):
            res_list[k] = left[i]
            i += 1
            k += 1

        # проверяем правую часть, при существовании остатков добавляем
        while j < len(right):
            res_list[k] = right[j]
            j += 1
            k += 1

        # возвращаем результирующий список
        return res_list


# запрашиваем ввод количества элементов
USER_NUMBER = int(input(f'Введите количество элементов: '))

# создаем список из 'USER_NUMBER' чисел в промежутке [0; 50)
SOURCE_LIST = [(random.random() * random.randint(0, 50)) for _ in range(USER_NUMBER)]
# выводим в консоль
print(f'Исходный список: {SOURCE_LIST}')

# сортируем
SOURCE_LIST = merge_sort(SOURCE_LIST)
# выводим в консоль результат
print(f'Отсортированный список: {SOURCE_LIST}')

