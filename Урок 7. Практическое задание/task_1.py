"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки, то завершение
Обязательно сделайте замеры времени обеих реализаций

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""

import timeit
import random


def bubble_sort(res_list):
    """
    Функция для сортировки списка методом Пузырька
    """
    # введем переменную для определения
    # была ли произведена замена элементов
    change = False
    # вводим счетчик 'n', который будет увеличиваться
    # до количества элементов списка
    n = 1
    while n < len(res_list):
        # проходим список поэлементно, сравнивая друг с другом
        for i in range(len(res_list) - n):
            # если текущий элемент меньше следующего, то меняем их местами
            if res_list[i] < res_list[i + 1]:
                res_list[i], res_list[i + 1] = res_list[i + 1], res_list[i]
                change = True
        # если 'change = False', значит ни один элемент не был заменен,
        # прерываем функцию и возвращаем текущий список
        if not change:
            return res_list
        # увеличиваем счетчик
        n += 1
    # возвращаем результирующий список
    return res_list


# создаем список из 10 чисел в промежутке [-100; 100)
SOURCE_LIST = [random.randint(-100, 99) for _ in range(10)]
# выводим в консоль
print(f'Исходный список (10 эл.): {SOURCE_LIST}')
# замеры 10
SOURCE_LIST = bubble_sort(SOURCE_LIST)
print(f'Время сортировки 10 элементов: '
      f'{timeit.timeit("bubble_sort(SOURCE_LIST)", setup="from __main__ import bubble_sort, SOURCE_LIST", number=1000)}')
# выводим в консоль результат
print(f'Отсортированный список: {SOURCE_LIST}')
print(f'--------------------------')

# создаем список из 100 чисел в промежутке [-100; 100)
SOURCE_LIST = [random.randint(-100, 99) for _ in range(100)]
# выводим в консоль
print(f'Исходный список (100 эл.): {SOURCE_LIST}')
# замеры 100
print(f'Время сортировки 100 элементов: '
      f'{timeit.timeit("bubble_sort(SOURCE_LIST)", setup="from __main__ import bubble_sort, SOURCE_LIST", number=1000)}')
# выводим в консоль результат
print(f'Отсортированный список: {SOURCE_LIST}')
print(f'--------------------------')

# создаем список из 1000 чисел в промежутке [-100; 100)
SOURCE_LIST = [random.randint(-100, 99) for _ in range(1000)]
# выводим в консоль
print(f'Исходный список (1000 эл.): {SOURCE_LIST}')
# замеры 1000
print(f'Время сортировки 1000 элементов: '
      f'{timeit.timeit("bubble_sort(SOURCE_LIST)", setup="from __main__ import bubble_sort, SOURCE_LIST", number=1000)}')
# выводим в консоль результат
print(f'Отсортированный список: {SOURCE_LIST}')
print(f'--------------------------')

# Вывод самих списков решил в комментарии не добавлять.
# Результаты замеров
# Время сортировки 10 элементов: 0.0023126000000000015
# Время сортировки 100 элементов: 0.018969299999999998
# Время сортировки 1000 элементов: 0.22696070000000002


# Решил не делать в данном случае отдельную функцию из-за одного 'if'
# проверил обе реализации, комментируя лишний код

# создаем список из 10 чисел в промежутке [-100; 100)
# не отсортирован заранее
# SOURCE_LIST = [-100, 35, 24, 50, 10, 12, -2, -15, 44, 32]
# отсортирован заранее
SOURCE_LIST = [50, 44, 35, 32, 24, 12, 10, -2, -15, -100]
print(f'Исходный список (10 эл.): {SOURCE_LIST}')
print(f'Время сортировки 10 элементов отсортированного списка (умный): '
      f'{timeit.timeit("bubble_sort(SOURCE_LIST)", setup="from __main__ import bubble_sort, SOURCE_LIST", number=1000)}')
print(f'Отсортированный список: {SOURCE_LIST}')

# Время сортировки 10 элементов не отсортированного списка (не умный): 0.0140156
# Время сортировки 10 элементов не отсортированного списка (умный): 0.0018607999999999993

# Время сортировки 10 элементов отсортированного списка (не умный): 0.0080351
# Время сортировки 10 элементов отсортированного списка (умный): 0.0014154000000000007


