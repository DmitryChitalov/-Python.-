"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы. Задачу можно решить без сортировки исходного
массива. Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках
"""

import random

# введем натуральное случайное число в диапазоне [1, 100]
M = random.randint(1, 100)

# создадим список из случайных чисел  в диапазоне [-100, 100]
# размером '2 * M + 1'
SOURCE_LIST = [random.randint(-100, 100) for _ in range(2 * M + 1)]
# выводим список в консоль
print(f'Исходный список: {SOURCE_LIST}')

# создаем два дополнительных списка для деления основного
# и сравнения между собой
MORE, LESS = list(), list()

# счетчик
i = 0

while i < len(SOURCE_LIST):
    # счетчик
    j = 0
    # проходим основной список и делим его
    while j < len(SOURCE_LIST):
        if SOURCE_LIST[i] < SOURCE_LIST[j]:
            # числа, что не меньше текущего (больше)
            MORE.append(SOURCE_LIST[j])
        elif SOURCE_LIST[i] > SOURCE_LIST[j]:
            # числа, что не больше текущего (меньше)
            LESS.append(SOURCE_LIST[j])
        # увеличиваем счетчик
        j += 1
    if len(MORE) == len(LESS):
        # если список равно поделен, то прекращаем цикл
        break
    else:
        # иначе очищаем оба дополнительных списка и проходим заново
        MORE.clear()
        LESS.clear()
    # увеличиваем счетчик
    i += 1

# если счетчик стал равен число, что больше кол-ва элементов списка
if i == len(SOURCE_LIST):
    # то медианы нет
    print(f'Медианы в данном списке нет, нельзя поделить его на равные части.')
else:
    # иначе выводим медиану
    print(f'Медиана: {SOURCE_LIST[i]}')


# Если я верно понял задачу, то в случае когда список имеет вид [1, 2, 2]
# медианы не существует, т.к. мы не существует числа, что будет равно делить
# текущий список на две равные части. Отсюда и такой вывод в конце
