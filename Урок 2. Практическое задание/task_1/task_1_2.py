"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Постарайтесь решить задачу двумя способами:
1. Через цикл
Вариант исполнения: в бесконечном цикле запрашивайте вид операции, например, +, - или *
Проверяйте вид операции и запускайте соответствующую команду
Предусмотрите выход из бесконечного цикла
2. Рекурсией.
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, /
- условие завершения рекурсии - введена операция 0

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""
from decimal import Decimal, InvalidOperation


def calc(operation, num_1, num_2):
    """
    Get operation ('+','-','*' or '/') and two real numbers.
    Return result as text.
    """
    if operation == '+':
        text = f'Результат {num_1} + {num_2} = {num_1 + num_2}'
    elif operation == '-':
        text = f'Результат {num_1} - {num_2} = {num_1 - num_2}'
    elif operation == '*':
        text = f'Результат {num_1} * {num_2} = {num_1 * num_2}'
    elif operation == '/':
        if num_2 == 0:
            text = 'На ноль делить нельзя.'
        else:
            text = f'Результат {num_1} / {num_2} = {num_1 / num_2}'
    return text


def num_input(numeral):
    """
    Get input string for input message and checks input until it's ok.
    Return Decimal. Recursion variant.
    """
    try:
        num = Decimal(input(f'Введите {numeral} число: '))
        return num
    except InvalidOperation:
        print(f'Неверный ввод. Требуется вещественное число. Повторите ввод числа.')
        return num_input(numeral)


def recursion_calc():
    """Recursion"""
    operation = input('Введите операцию (+, -, *, / или 0 для выхода): ')
    # тут pylint ругается, рекомендует использовать
    # if OPERATION in ('+', '-', '*', '/'): но массивы не используем =)
    if (operation == '+' or operation ==
            '-' or operation == '*' or operation == '/'):
        num_1 = num_input('первое')
        num_2 = num_input('второе')
        print(calc(operation, num_1, num_2))
        recursion_calc()
    else:
        print('Неверная операция. Повторите ввод.')
        recursion_calc()


recursion_calc()
