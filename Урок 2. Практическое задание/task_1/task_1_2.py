"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Постарайтесь решить задачу двумя способами:
1. Через цикл
Вариант исполнения: в бесконечном цикле запрашивайте вид операции, например, +,
- или *
Проверяйте вид операции и запускайте соответствующую команду
Предусмотрите выход из бесконечного цикла
2. Рекурсией.
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, /
- условие завершения рекурсии - введена операция 0

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""

import sys


def validation(some_var):
    """
    Проверка валидности вводимых пользователем данных.
    :param some_var: str
    :return: float
    """
    if some_var == "q":
        sys.exit("Вы вышли из программы")
    try:
        some_var = float(some_var)
        return some_var
    except ValueError:
        return validation(input("Вы ввели значение, не являющееся числом. "
                                "Повторите попытку или введите 'q' для "
                                "выхода:\n"))


def rec_func(first, second):
    """
    Функция принимает 2 числа и вызвыает саму себя, каждый раз запрашивая
    знак арифметической операции и печатая результат соответствующей операции
    для этих чисел. Выход их рекурсии осуществляется вводом символа 'q'.
    :param first: float
    :param second: float
    :return: str
    """
    # Решил вместо 0 использовать q для общего стиля в задаче.
    arithmetic_operation = input("Введите знак арифметической операции для "
                                 "вычисления или \"q\" для выхода:\n")

    if arithmetic_operation == "+":
        print(f"{first} + {second} = {round(first + second, 3)}")

    elif arithmetic_operation == "-":
        print(f"{first} - {second} = {round(first - second, 3)}")

    elif arithmetic_operation == "*":
        print(f"{first} * {second} = {round(first * second, 3)}")

    elif arithmetic_operation == "/":
        if second != 0:
            print(f"{first} / {second} = {round(first / second, 3)}")
        else:
            print("Делить на ноль можно, но не в этом случае.")

    elif arithmetic_operation != "q":
        print("Ошибка ввода.")

    else:
        return print("Вы вышли из программы")

    return rec_func(first, second)


FIRST_NUM = validation(input("Введите первое число или \"q\" для выхода:\n"))
SECOND_NUM = validation(input("Введите второе число или \"q\" для выхода:\n"))

rec_func(FIRST_NUM, SECOND_NUM)
