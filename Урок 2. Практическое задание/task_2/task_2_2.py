"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""


def count_odds(num, odds=0, evens=0):
    """ Recursively checks each last digit to be odd """
    if num == 0:
        return f'There are {odds} odds and {evens} evens'
    if num % 2:
        return count_odds(num // 10, odds, evens + 1)
    return count_odds(num // 10, odds + 1, evens)


print(count_odds(1234))
print(count_odds(98765456789))
print(count_odds(989))
