"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""
def even_count(NUMBER, even_score, not_even_score):
    if int(NUMBER) > 0 and int(NUMBER) % 2 == 0:
        even_score += 1
        return even_count(NUMBER // 10, even_score, not_even_score)
    elif int(NUMBER) > 0:
        not_even_score += 1
        return even_count(NUMBER // 10, even_score, not_even_score)
    return f'Количество четных' \
            f' и нечетных цифр в числе равно: ({even_score}, {not_even_score})'

NUMBER = int(input('Введите натуральное число : '))
print(even_count(NUMBER, even_score=0, not_even_score=0))
