"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""


def odd_or_even(number, odd=0, even=0):
    if len(str(number)) == 1:
        if number % 2 == 0:
            even += 1
            return odd, even
        odd += 1
        return odd, even
    if (number % 10) % 2 != 0:
        odd += 1
        return odd_or_even(number // 10, odd, even)
    even += 1
    return odd_or_even(number // 10, odd, even)


while True:
    try:
        NUMBER = int(input(f'Введите число: '))
        ODD, EVEN = odd_or_even(NUMBER)
        print(f'В числе {NUMBER} всего {EVEN + ODD} цифр, из которых {EVEN} чётных и {ODD} нечётных')
        break
    except ValueError:
        print(f'Ошибка ввода!')
    except RecursionError:
        print(f'Введите меньшее число элементов')
