"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""


def digit_counter(num, even, odd):
    """
    _________
    """
    if num <= 0:
        return f"{EVEN} even,{ODD} odd integer"
    else:
        if num % 2 == 0:
            even += 1
        else:
            odd += 1
        return digit_counter(num // 10, even, odd)


if __name__ == "__main__":
    EVEN = 0
    ODD = 0
    try:
        NUM = int(input("Input positive integer: "))
        if NUM < 0:
            print("Integer must bu positive")
        else:
            print(digit_counter(NUM, EVEN, ODD))
    except ValueError:
        print("Mistake")
