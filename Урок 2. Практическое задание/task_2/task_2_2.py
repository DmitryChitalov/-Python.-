"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""

def even_odd(full_num, even=0, odd=0, count=0):
    """
    Функция even_odd принимает в качестве аргумента число, в котором
    производит подсчет четных и нечетных чисел.

    Функция рекурсивно вызывает себя, на каждой итереции забирая по одной цифре из числа
    и в зависимости от того, четное оно или не четное, прибавляет единицу к
    соответствующей переменной.

    :param full_num:
    :return:
    """
    num = full_num % 10
    count += 1
    if num % 2 == 0:
        even += 1
    else:
        odd += 1
    full_num = full_num // 10
    if full_num == 0:
        print(f'В числе {ENTER_NUM} всего {count} цифр, из которых {even} чётных и {odd} нечётных.')
        return
    even_odd(full_num, even, odd, count)

ENTER_NUM = int(input('Введите число: '))
even_odd(ENTER_NUM)
