"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""


def even_odd(number, n=1, even=0, odd=0, count=0):
    numeral = number % (10 * n) // n
    if numeral % 2 == 0:
        even += 1
    else:
        odd += 1
    count += 1
    n *= 10
    if n > number:
        print(f'В числе {number} всего {count} цифр, из которых {even} чётных и {odd} нечётных')
        return
    even_odd(number,n,even,odd,count)


def input_number():
    try:
        return int(input('Введите натуральное число:'))
    except ValueError:
        print('Это не похоже на натуральное число')
        return input_number()


even_odd(input_number())
