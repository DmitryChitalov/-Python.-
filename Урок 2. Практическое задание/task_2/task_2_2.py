"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""
def recursion(number, even_count, odd_count):
    """Рекурсия решения фцнкции"""
    #Базовый случай
    if number <= 0:
        print("Количество нечетных цифр: ", odd_count)
        print("Количество четных цифр: ", even_count)
        return

    if number % 2 == 0:
        even_count = even_count + 1
    else:
        odd_count = odd_count + 1
    recursion(number // 10, even_count, odd_count)

# start
recursion(int(input(f"Введите число: ")), 0, 0)
