"""
3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""

import sys


# Вариант в целом работающий, но без ведущих нолей для чисел, оригинал которых
# был с нолями в конце. Ноли можно добавить строковыми методами, или изначально
# делая всё через сложение строк. Но это уже будут не арифметические операции.


def validation(some_var):
    """
    Проверка валидности вводимых пользователем данных.
    :param some_var: str
    :return: int
    """
    if some_var == "q":
        sys.exit("Вы вышли из программы")
    try:
        some_var = abs(int(some_var))
        return some_var
    except ValueError:
        return validation(input("Вы ввели значение, не являющееся числом. "
                                "Повторите попытку или введите 'q' для "
                                "выхода:\n"))


def rec_func(num, inv_num=0):
    """
    Функция принимает число, прибавляет его последнюю цифру к новому числу
    и вызвыает саму себя, передавая в параметрах результат
    деления исходного числа на 10 нацело и новое число, умноженное на 10.
    Выход из рекурсии осуществляется, когда результат деления числа нацело на
    10 равен 0.
    :param num: int
    :param inv_num: int
    :return: str
    """

    num, buffer_num = num // 10, num % 10
    inv_num += buffer_num

    return rec_func(num, inv_num * 10) if num != 0 else \
        print(f"Отзеркаленное число:\n{inv_num}")


NUMBER = validation(input("Введите целое число (отрицательное число будет "
                          "взято по модулю) или 'q' для выхода:\n"))
rec_func(NUMBER)
