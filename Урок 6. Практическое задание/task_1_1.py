"""
1.	Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи.
Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.


ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО



"""

"""
Задание_5.	В массиве найти максимальный отрицательный элемент.
Вывести на экран его значение и позицию (индекс) в массиве.

Подсказка: максимальный отрицательный - элемент, наиболее близкий к нулю

Пример:
Базовый список: [-55, -69, -5, 72, -41, -58, -79, 58, 74, 1]
Максимальный отрицательный элемент в данном массиве = -5, его индекс 2
"""
import random
from memory_profiler import profile

@profile
def max_negative_elem():
    ARR = [random.randint(-40, 40) for i in range(30)]
    print(f'Массив {ARR}')

    i = 0
    index = -1
    while i < len(ARR):
        if ARR[i] < 0 and index == -1:
            index = i
        elif ARR[i] < 0 and ARR[i] > ARR[index]:
            index = i
        i += 1
    if index == -1:
        print(f'В массиве нет отрицательных значений')
    else:
        print(f'Максимальный отрицательный элемент в данном массиве = {ARR[index]}, его индекс {index + 1}')

max_negative_elem()

# Можно сделать вывод, что проблем с памятью нет. Всё в пределах нормы.

