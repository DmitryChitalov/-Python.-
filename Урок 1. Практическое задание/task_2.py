"""
Задание 2. Выполнить логические побитовые операции "И", "ИЛИ"
и др. над числами 5 и 6. Выполнить
над числом 5 побитовый сдвиг вправо и влево на два знака.

Подсказка: это стандартные операции, которые осуществляются с помощью
стандартных операторов. Попробуйте найти каких именно.
"""
a = 5
b = 6
print()
# 5	    101
# 6	    110
# 5 | 6	111
# В итоге мы получаем 111  == > 7  .
# a = 5
# b = 6
# lst_ab = [a, b]
#
#
# def qweq(xxx):
#     sss = ''
#     while xxx > 0:
#         sss = str(xxx % 2) + sss
#         xxx = xxx // 2
#     return sss
#
#
# def qwe(xxx):
#     for p in xxx:
#         sss = ''
#         while p > 0:
#             sss = str(p % 2) + sss
#             p = p // 2
#         yield sss
#
#
# z, x = qwe(lst_ab)
# print(f'Oтвет десятичное число a = {a} и b = {b}'
#       f' переводим  соответственно в двоичное - >{z} и {x}')
print()
# # ================================================================
# bit_or = int(z) | int(x)
# print("Результат побитового OR:   %s" % bin(bit_or))
# bit_and = int(z) & int(x)
# print("Результат побитового AND:   %s" % bin(bit_and))
# bit_xor = int(z) ^ int(x)
# print("Результат побитового OR:   %s" % bin(bit_xor))
# # ================================================================
#
# zzz = bit_or
# ddd = 2  # размер
#
#
# def two_ten(qwe, dd):
#     res = 0
#     c = 0
#     while qwe > 0:
#         rem_nnn = qwe % 10
#         res += rem_nnn * dd ** c
#         qwe //= 10
#         c += 1
#
#     return f' двоичное число  {zzz}-переводим в десятичное - >{res}'
#
#
# print(two_ten(zzz, ddd))
#
# # --------------------сдвиг влево ----------------------------------
# weqwe = 101  # 5
# # 5 << 2 == 5 * math.pow(2, 2)
# vvv = 5 << 2
# print(vvv)  # 20
# print(f'Oтвет десятичное число {vvv} переводим в двоичное - >{qweq(vvv)}')
# # Oтвет десятичное число 20 переводим в двоичное - >10100
# # --------------------сдвиг вправо ----------------------------------
# b_right = vvv >> 4
# print(f'-------------->{b_right}')  # 1
# print(f'Oтвет десятичное число {b_right} переводим в двоичное - >{qweq(b_right)}')
# # Oтвет десятичное число 1 переводим в двоичное - >1


bit_or = a | b
print("Результат побитового OR:   %s" % bin(bit_or))
bit_and = a & b
print("Результат побитового AND:   %s" % bin(bit_and))
bit_xor = a ^ b
print("Результат побитового OR:   %s" % bin(bit_xor))

# --------------------сдвиг влево ----------------------------------
# a = 5
a_2_bit = a << 2
print(a_2_bit) # ----> 20
print(bin(a_2_bit)) # 0b10100

# --------------------сдвиг в право  ----------------------------------
# a = 5
a_2_bit = a >> 2
print(a_2_bit) # ----> 1
print(bin(a_2_bit)) # 0b1
