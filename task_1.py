"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки, то завершение
Обязательно сделайте замеры времени обеих реализаций

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
import random
from memory_profiler import profile

lst = [random.randint(-100, 100) for i in range(10)]
print(f'Исходный массив :\n{lst}')


@profile
def bubble_sort(mass_ls):
    n = 1
    while n < len(mass_ls):
        sort = True #------
        for i in range(len(lst) - n):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                sort = False #--------
        if sort:
            break
        n += 1
    print(f'Отсортированный массив по убыванию:\n {mass_ls}')


bubble_sort(lst)

# Для оптимизации алгоритма, цикл завершается, если замен больше не происходит, в некоторых случаях сильно экономит
# время выполнения работы программы

# Line #    Mem usage    Increment   Line Contents
# ================================================
#     8     16.2 MiB     16.2 MiB   @profile
#     9                             def bubble_sort(mass_ls):
#    10     16.2 MiB      0.0 MiB       n = 1
#    11     16.2 MiB      0.0 MiB       while n < len(mass_ls):
#    12     16.2 MiB      0.0 MiB           sort = True
#    13     16.2 MiB      0.0 MiB           for i in range(len(lst) - n):
#    14     16.2 MiB      0.0 MiB               if lst[i] < lst[i + 1]:
#    15     16.2 MiB      0.0 MiB                   lst[i], lst[i + 1] = lst[i + 1], lst[i]
#    16     16.2 MiB      0.0 MiB                   sort = False
#    17     16.2 MiB      0.0 MiB           if sort:
#    18     16.2 MiB      0.0 MiB               break
#    19     16.2 MiB      0.0 MiB           n += 1
#    20     16.2 MiB      0.0 MiB       print(f'Отсортированный массив по убыванию:\n {mass_ls}')

# 0.014001100000000002 время выполнения (без учета профайлера)
