"""
2.	Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)
"""
import collections

NUMB_1 = list(input("Введите первое число: "))
NUMB_2 = NUMB_2 = list(input("Введите первое число: "))

# функция для перевода шестнадцатеричного числа в виде списка в десятичное число
def to_16(numb_list):
    """
    Функция превращает шестнадцатеричное число в виде списка в десятичное число
    :param numb_list: шестнадцатеричное число в виде списка
    :return: десятичное число
    """

    # создаем шаблон defaultdict
    def_dict = collections.defaultdict(list)

    # переделываем список, чтобы вместо букв стояли соответствующие им числа
    numb_list_1 = []
    for i in numb_list:
        if i == 'A':
            i = 10
        elif i == 'B':
            i = 11
        elif i == 'C':
            i = 12
        elif i == 'D':
            i = 13
        elif i == 'E':
            i = 14
        elif i == 'F':
            i = 15
        else:
            i = int(i)
        numb_list_1.append(i)

    # переворачиваем список для соответствия разрядов
    numb_list_1.reverse()


    """Далее можно из списка сделать десятичное число вот таким образом
    numb = 0
    for t in range(0, len(numb_list_1)):
        numb = numb + (numb_list_1[t])*(16**t)"""

    #А можно используя default dict.
    # Создаем из списка default dict, где ключ - это разряд числа, а значение - цифра в разряде
    for j in range(0, len(numb_list_1)):
        def_dict[j].append(numb_list_1[j])

    # превращаем default dict в десятичное число.
    numb = 0
    for n in def_dict:
        for m in def_dict[n]:
            numb = numb + m * (16 ** n)
    return numb


def from_16(number):
    """
    Функция превращает десятичное число в шестнадцатеричное число в виде списка
    :param number: десятичное число
    :return: шестнадцатеричное число в виде списка
    """
    # Превращаем число в список
    end = []
    while 1 != 0:
        residue = number % 16
        end.append(residue)
        number = number // 16
        if number < 16:
            end.append(number)
            break

    # Переворачиваем список
    end.reverse()

    # Формируем шестнадцатеричное число в виде списка, где вместо цифр стоят соответсвующие им буквы
    result = []
    for elem in end:
        if elem == 10:
            elem = 'A'
        elif elem == 11:
            elem = 'B'
        elif elem == 12:
            elem = 'C'
        elif elem == 13:
            elem = 'D'
        elif elem == 14:
            elem = 'E'
        elif elem == 15:
            elem = 'F'
        else:
            elem = str(elem)
        result.append(elem)

    return result


def add_16(num_1, num_2):
    """
    Функция принимает на вход два шестнадцатеричных числа в виде списка и
    возвращает их сумму в виде шестнадцатеричного числа в виде списка
    """
    num_3 = to_16(num_1) + to_16(num_2)
    return from_16(num_3)


def multi_16(num_1, num_2):
    """
    Функция принимает на вход два шестнадцатеричных числа в виде списка и
    возвращает их произведение в виде шестнадцатеричного числа в виде списка
    """
    num_3 = to_16(num_1) * to_16(num_2)
    return from_16(num_3)


print(f"Сумма чисел: {add_16(NUMB_1, NUMB_2)}")
print(f"Произведение чисел: {multi_16(NUMB_1, NUMB_2)}")
